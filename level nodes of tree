class TreeNode:
    def __init__(self, value):
        self.value = value
        self.left = None
        self.right = None
        self.hd=0

class BinaryTree:
    def __init__(self, root):
        self.root = root

    def level_order_traversal(self):
        if not self.root:
            return []

        queue = [self.root]
        result = []

        while queue:
            level_size = len(queue) 
            current_level = []

            for _ in range(level_size):
                node = queue.pop(0) 
                current_level.append(node.value)

              
                if node.left:
                    queue.append(node.left)
                if node.right:
                    queue.append(node.right)

            result.append(current_level)

        return result




root = TreeNode(1)
root.left = TreeNode(2)
root.right = TreeNode(3)
root.left.left = TreeNode(4)
root.left.right = TreeNode(5)
root.right.left = TreeNode(6)
root.right.right = TreeNode(7)

tree = BinaryTree(root)
print(tree.level_order_traversal())  # Output: [[1], [2, 3], [4, 5, 6, 7]]
